name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GO_VERSION: '1.24'

jobs:
  validate-tag:
    name: Validate Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}

    steps:
    - name: Get version from tag
      id: get-version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Check if prerelease
      id: check-prerelease
      run: |
        if [[ "${{ steps.get-version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        fi

  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: validate-tag

    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: windows
            arch: amd64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ needs.validate-tag.outputs.version }}
        BINARY_NAME=socks-forwarder-${{ matrix.os }}-${{ matrix.arch }}

        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi

        go build \
          -ldflags="-w -s -X main.version=${VERSION} -X main.buildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${GITHUB_SHA:0:7}" \
          -o "${BINARY_NAME}" \
          ./cmd/socks-forwarder

    - name: Create archive
      run: |
        VERSION=${{ needs.validate-tag.outputs.version }}
        OS_ARCH=${{ matrix.os }}-${{ matrix.arch }}

        mkdir -p "socks-forwarder-${VERSION}-${OS_ARCH}"

        # Copy binary
        if [ "${{ matrix.os }}" = "windows" ]; then
          cp "socks-forwarder-${OS_ARCH}.exe" "socks-forwarder-${VERSION}-${OS_ARCH}/"
        else
          cp "socks-forwarder-${OS_ARCH}" "socks-forwarder-${VERSION}-${OS_ARCH}/"
        fi

        # Copy documentation and configs
        cp README.md LICENSE config.yaml "socks-forwarder-${VERSION}-${OS_ARCH}/"

        # Create archive
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip -r "socks-forwarder-${VERSION}-${OS_ARCH}.zip" "socks-forwarder-${VERSION}-${OS_ARCH}/"
        else
          tar -czf "socks-forwarder-${VERSION}-${OS_ARCH}.tar.gz" "socks-forwarder-${VERSION}-${OS_ARCH}/"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          *.tar.gz
          *.zip

  build-docker:
    name: Build and Push Release Docker Images
    runs-on: ubuntu-latest
    needs: validate-tag

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}},enable=${{ !needs.validate-tag.outputs.is-prerelease }}
          type=raw,value=latest,enable=${{ !needs.validate-tag.outputs.is-prerelease }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.validate-tag.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          GIT_COMMIT=${{ github.sha }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build-binaries, build-docker]

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch full history for changelog

    - name: Download release artifacts
      uses: actions/download-artifact@v5
      with:
        pattern: "release-*"
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p ./releases
        find ./artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} ./releases/

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog since last tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $PREV_TAG" >> $GITHUB_OUTPUT
          git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=Initial release" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: ./releases/*
        name: Release ${{ needs.validate-tag.outputs.version }}
        body: |
          ## SOCKS5 Forwarder ${{ needs.validate-tag.outputs.version }}

          A Golang SOCKS5 proxy server that forwards connections based on hostname rules.

          ### üê≥ Docker Images

          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.validate-tag.outputs.version }}
          docker run -p 1080:1080 ghcr.io/${{ github.repository }}:${{ needs.validate-tag.outputs.version }}
          ```

          ### üì• Binary Downloads

          Download the appropriate binary for your platform from the assets below.

          ### üöÄ Quick Start

          1. Download the binary for your platform
          2. Create a `config.yaml` file (see repository for examples)
          3. Run: `./socks-forwarder -config config.yaml`

          ### üìã Changelog

          ${{ steps.changelog.outputs.changelog }}

          ### üîç Verification

          All releases are signed and can be verified using the provided checksums.
        draft: false
        prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v5
      if: needs.validate-tag.outputs.is-prerelease == 'false'
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ github.repository }}
        readme-filepath: ./README.md
      continue-on-error: true
